%% AA273 Project Code
% Hyun Joo Lee

clear; clc; close all;

% Select flight
FNAME = 'BaseOreo1';
camView = 13503; % use 13503 or 13890

%  Load relevant information              
FPS = 990;
FCUT = 80;

% Read in xy pts for all camera views
if camView == 13503
    fname13503 = [FNAME '_13503DeepCut_resnet50_13503Jan31shuffle1_900000.csv'];
    if exist(fname13503, 'file')
        trackingdata = importdata(fname13503);
        trackingdata = trackingdata.data;
    else
        disp('File not found.');
        trackingdata = [];
    end
elseif camView == 13890
    fname13890 = [FNAME '_13890DeepCut_resnet50_13890Jan31shuffle1_900000.csv'];
    if exist(fname13890, 'file')
        trackingdata = importdata(fname13890);
        trackingdata = trackingdata.data;
    else
        disp('File not found.');
        trackingdata = [];
    end
end
%number of frames
N=FPS;

% DATA INPUT
eye_x=trackingdata(:,2);
eye_y=trackingdata(:,3);
eye_likelihood=trackingdata(:,4);
tail_x=trackingdata(:,5);
tail_y=trackingdata(:,6);
tail_likelihood=trackingdata(:,7);
wingtip_x=trackingdata(:,8);
wingtip_y=trackingdata(:,9);
wingtip_likelihood=trackingdata(:,10);

Measurement=[eye_x,eye_y,tail_x,tail_y, wingtip_x,wingtip_y];
% calculation of shoulder coordinate
eyeToWing=sqrt((Measurement(1,5)-Measurement(1,1))^2+(Measurement(1,6)-Measurement(1,2))^2);
shoulder_x_init= Measurement(1,1)+(Measurement(1,5)-Measurement(1,1))*(0.25);
shoulder_y_init= Measurement(1,2)+(Measurement(1,6)-Measurement(1,2))*(0.25);
angle_init= atan((Measurement(1,5)-shoulder_x_init)/(Measurement(1,6)-shoulder_y_init));

%arbitrary time
dt = 1/N; t=0:dt:N*dt;

% State/Dynamics
% x=[eye_x, eye_y, body_vx, body_vy, tail_x, tail_y, shoulder_x,
% shoulder_y, wing_theta, wing_x, wing_y]
L = 94; % Maximum wing span calculated from eye to wing coordinates
w = sin(t); % Approximation of wing 
f = @(x,w) [x(1)+x(3)*dt; x(2)+x(4)*dt; x(3); x(4);...
    x(5)+x(3)*dt; x(6)+x(4)*dt; x(7)+x(3)*dt; x(8)+x(4)*dt;...
    atan((x(10)-x(7))/(x(11)-x(8)))+w*dt;...
    x(7)+L*cos(x(9)); x(8)+L*sin(x(9))]; % (11,1)
g = @(x) [x(1); x(2); x(5); x(6); x(10); x(11)]; %(6,1)
Ja = @(x) [...
    1,0,dt,zeros(1,8);
    0,1,0,dt,zeros(1,7);
    0,0,1,zeros(1,8);
    0,0,0,1,zeros(1,7);
    0,0,dt,0,1,zeros(1,6);
    0,0,0,dt,0,1,zeros(1,5);
    0,0,dt,0,0,0,1,zeros(1,4);
    0,0,0,dt,0,0,0,1,zeros(1,3);
    zeros(1,6),1/(1+((x(10)-x(7))/(x(11)-x(8)))^2)/(-(x(11)-x(8))),...
    1/(1+((x(10)-x(7))/(x(11)-x(8)))^2)*(-(x(10)-x(7))/(x(11)-x(8))^2),...
    0,1/(1+((x(10)-x(7))/(x(11)-x(8)))^2)/(x(11)-x(8)),...
    1/(1+((x(10)-x(7))/(x(11)-x(8)))^2)*((x(10)-x(7))/(x(11)-x(8))^2)
    zeros(1,6),1,0,-L*sin(x(9)),0,0;
    zeros(1,7),1,L*cos(x(9)),0,0]; 
Jc = [...
    1,zeros(1,10);
    0,1,zeros(1,9);
    zeros(1,4),1,zeros(1,6);
    zeros(1,5),1,zeros(1,5);
    zeros(1,9),1,0;
    zeros(1,10),1]; %(6,11) Jc=C because it is linear
nx = 11;%number of states
% Q = zeros(nx,nx);% Process noise (dynamic) variance
Q = 0.1*eye(nx);
ny=6;
R= zeros(ny,ny,N); % Measurement noise variance (likelihood data)
for i=1:N % Noise = 1-likelihood(0~0.9999)
    if wingtip_likelihood(i) < 0.5
        wing_var=1000000;
    else
        wing_var=1-wingtip_likelihood(i);
    end
    if eye_likelihood(i) < 0.9
        eye_var=1000000;
    else
        eye_var=1-eye_likelihood(i);
    end
    if tail_likelihood(i) < 0.9
        tail_var=100000;
    else
        tail_var=1-tail_likelihood(i);
    end
%     R(:,:,i)=diag(...
%         [(1-eye_likelihood(i)),(1-eye_likelihood(i)),...
%         (1-tail_likelihood(i)),(1-tail_likelihood(i)),...
%         (1-wingtip_likelihood(i)), (1-wingtip_likelihood(i))]);
    R(:,:,i)=diag([eye_var,eye_var, tail_var, tail_var, wing_var, wing_var]);
end

% EKF parameters
mu_ekf=zeros(nx,N); %(11,990)
cov_ekf=zeros(nx,nx,N); %(11,11,990)

% initialization
mu_ekf(:,1)=[Measurement(1,1),Measurement(1,2),0,0,Measurement(1,3),...
    Measurement(1,4),shoulder_x_init,shoulder_y_init,angle_init,Measurement(1,5), Measurement(1,6)];
cov_ekf(:,:,1)=eye(nx);

%
mu_ekf_predict = zeros(nx,N);
cov_ekf_predict = zeros(nx,nx,N);
mu_ekf_update = zeros(nx,N);
cov_ekf_update = zeros(nx,nx,N);
mu_ekf_smoothed = zeros(nx,N);
cov_ekf_smoothed = zeros(nx,nx,N);
A_data = zeros(nx,nx,N);

for i=2:N
    % PREDICTION STEP
    % mean
    mu_ekf(:,i) = f(mu_ekf(:,i-1),w(1,i-1));
    mu_ekf_predict(:,i)=mu_ekf(:,i);
    
    % A 
    A = Ja(mu_ekf(:,i));
    A_data(:,:,i) = A;
    
    % covariance
    cov_ekf(:,:,i) = A*cov_ekf(:,:,i-1)*A' + Q;
    cov_ekf_predict(:,:,i)=cov_ekf(:,:,i);
    
    % C
    % C = zeros(ny,nx);
    C = Jc;
    
    % UPDATE STEP
    K = cov_ekf(:,:,i)*C'/(C*cov_ekf(:,:,i)*C'+R(:,:,i));
    
    meas=Measurement(i,:)';
    meas=meas - g(mu_ekf(:,i));
    mu_ekf(:,i) = mu_ekf(:,i) +K*meas;
    cov_ekf(:,:,i) = (eye(nx)-K*C)*cov_ekf(:,:,i);
    
    mu_ekf_update(:,i) = mu_ekf(:,i);
    cov_ekf_update(:,:,i) = cov_ekf(:,:,i);   
end

% SMOOTHING STEP
mu_ekf_smoothed(:,end) = mu_ekf_update(:,end);
cov_ekf_smoothed(:,:,end) = cov_ekf_update(:,:,end);

for i = 1:N-2
    %w=sin(t(N-i));
    A = Ja(mu_ekf_update(:,N-i));
    mu_minus = f(mu_ekf_update(:,N-i), w(N-i));
    cov_minus = A*(cov_ekf_update(:,:,N-i))*A'+Q;
    K=cov_ekf_update(:,:,N-i)*A'*inv(cov_minus);
    mu_ekf_smoothed(:,N-i) = mu_ekf_update(:,N-i)+...
        K*(mu_ekf_smoothed(:,N-i+1)-mu_minus);
    cov_ekf_smoothed(:,:,N-i)=cov_ekf_update(:,:,N-i)+...
        K*(cov_ekf_smoothed(:,:,N-i+1)-cov_minus)*K';
end

mu_ekf_smoothed = mu_ekf_smoothed(:,2:end);
cov_ekf_smoothed = cov_ekf_smoothed(:,2:end);
%
% PLOT
%Eye Tracking Figure
% figure; hold on;
% title('Tracking eye features')
% plot3(Measurement(:,1), Measurement(:,2),t,'LineWidth',2); 
% plot3(mu_ekf(1,:),mu_ekf(2,:),t(1:990), '.','LineWidth',2);
% plot3(mu_ekf_smoothed(1,:), mu_ekf_smoothed(2,:),t(2:990),'--','LineWidth',2);
% zlabel('t');
% xlabel('x');
% ylabel('y');
% legend('Measurement','EKF','EKF smoothing'); hold on
% grid on;

% %Tail Tracking
% figure; hold on;
% title('Tracking Tail features')
% plot3(Measurement(:,3), Measurement(:,4),t,'LineWidth',2); 
% plot3(mu_ekf(5,:),mu_ekf(6,:),t(1:990), '.','LineWidth',2);
% plot3(mu_ekf_smoothed(5,:), mu_ekf_smoothed(6,:),t(2:990),'--','LineWidth',2);
% zlabel('t');
% xlabel('x');
% ylabel('y');
% legend('Measurement','EKF','EKF smoothing'); hold on

% % Wing Tracking Figure
% figure; hold on;
% title('Tracking Wing features')
% plot3(Measurement(:,5), Measurement(:,6),t,'LineWidth',1); 
% plot3(mu_ekf(10,:),mu_ekf(11,:),t(1:990), '.','LineWidth',2);
% plot3(mu_ekf_smoothed(10,:), mu_ekf_smoothed(11,:),t(2:990),'-','LineWidth',2);
% zlabel('t');
% xlabel('x');
% ylabel('y');
% legend('Measurement','EKF','EKF smoothing'); hold on

% Create video
video = VideoReader([FNAME '_' num2str(camView) '.mp4']);    
%video = VideoReader([FNAME '_' num2str(camView) '_labeled_test.avi']);    
labeled_vid = VideoWriter([FNAME '_' num2str(camView) '_forImage']); %,'MPEG-4' (not for windows 10)
open(labeled_vid); 

width = 1280;
height = 800;
fig = figure('Position',[10 10 1280 800]);
set(fig, 'MenuBar', 'none', 'ToolBar', 'none');
set(gcf,'Color',[1 1 1])

x_eye=mu_ekf_smoothed(1,:)';
y_eye=mu_ekf_smoothed(2,:)';
x_tail=mu_ekf_smoothed(5,:)';
y_tail=mu_ekf_smoothed(6,:)';
x_wing= mu_ekf_smoothed(10,:)';
y_wing= mu_ekf_smoothed(11,:)';

for i=1:length(x_eye) 
    clc;
    disp(['Saving frame ' sprintf('%d/%d', i, length(x_eye))]);
    frame = read(video,i);
    cla;
    imshow(frame); hold on;
    plot(x_eye(:), y_eye(:), 'g', 'MarkerSize', 1);
    plot(x_tail(:), y_tail(:), 'c', 'MarkerSize', 1);
    plot(x_wing(:), y_wing(:), 'm', 'MarkerSize', 1);
    plot(x_eye(i), y_eye(i), 'g.', 'MarkerSize', 10);
    plot(x_tail(i), y_tail(i), 'c.', 'MarkerSize', 10);
    plot(x_wing(i), y_wing(i), 'm.', 'MarkerSize', 10);
    %         axis([0 1280 0 800]);
    currFrame = getframe(fig);
    writeVideo(labeled_vid, currFrame.cdata);
end

close(labeled_vid);
% plot3(Measurement(:,5), Measurement(:,6),t,'LineWidth',1); 
% plot3(mu_ekf(10,:),mu_ekf(11,:),t(1:990), '.','LineWidth',2);
% plot3(mu_ekf_smoothed(10,:), mu_ekf_smoothed(11,:),t(2:990),'-','LineWidth',2);
